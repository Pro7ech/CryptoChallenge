from random import randrange
import analyse_box
from ast import literal_eval
from math import log
import operator
from os import urandom
import compute_LP

# Precomputed parity S-BOX from 0 to 255
P = [0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,
     1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,
     1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,
     0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,
     1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,
     0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,
     0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,
     1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0]

# Computes the parity of a 64 bit unsigned integer
def parity(x):
    x ^= x >> 32
    x ^= x >> 16
    x ^= x >> 8
    return P[x&0xFF]

def SINV(S):
    INV = []
    for i in range(len(S)):
        INV += [S.index(i)]
    return INV

S8_0 = [142, 177, 44, 179, 140, 17, 46, 19, 240, 79, 114, 77, 242, 207, 112, 205, 190, 129, 20, 139, 180, 33, 30, 43, 64, 255, 202, 245, 74, 127, 192, 117, 223, 96, 85, 106, 213, 224, 95, 234, 1, 62, 171, 52, 11, 158, 161, 148, 111, 208, 237, 210, 109, 80, 239, 82, 49, 14, 147, 12, 51, 174, 145, 172, 31, 32, 181, 42, 21, 128, 191, 138, 94, 225, 212, 235, 84, 97, 222, 107, 238, 81, 108, 83, 236, 209, 110, 211, 47, 16, 141, 18, 45, 176, 143, 178, 113, 206, 243, 204, 115, 78, 241, 76, 144, 175, 50, 173, 146, 15, 48, 13, 160, 159, 10, 149, 170, 63, 0, 53, 193, 126, 75, 116, 203, 254, 65, 244, 136, 183, 34, 189, 130, 23, 40, 29, 105, 214, 227, 220, 99, 86, 233, 92, 219, 100, 89, 102, 217, 228, 91, 230, 186, 133, 24, 135, 184, 37, 26, 39, 68, 251, 198, 249, 70, 123, 196, 121, 5, 58, 167, 56, 7, 154, 165, 152, 55, 8, 157, 2, 61, 168, 151, 162, 246, 73, 124, 67, 252, 201, 118, 195, 27, 36, 185, 38, 25, 132, 187, 134, 197, 122, 71, 120, 199, 250, 69, 248, 41, 22, 131, 28, 35, 182, 137, 188, 119, 200, 253, 194, 125, 72, 247, 66, 232, 87, 98, 93, 226, 215, 104, 221, 150, 169, 60, 163, 156, 9, 54, 3, 90, 229, 216, 231, 88, 101, 218, 103, 164, 155, 6, 153, 166, 59, 4, 57]
S8_1 = [95, 224, 85, 106, 223, 234, 213, 96, 190, 129, 180, 43, 30, 139, 20, 33, 140, 179, 142, 17, 44, 177, 46, 19, 237, 82, 239, 208, 109, 80, 111, 210, 51, 12, 49, 174, 147, 14, 145, 172, 114, 205, 112, 79, 242, 207, 240, 77, 192, 127, 202, 245, 64, 117, 74, 255, 1, 62, 11, 148, 161, 52, 171, 158, 146, 173, 144, 15, 50, 175, 48, 13, 108, 211, 110, 81, 236, 209, 238, 83, 160, 159, 170, 53, 0, 149, 10, 63, 222, 97, 212, 235, 94, 107, 84, 225, 65, 254, 75, 116, 193, 244, 203, 126, 31, 32, 21, 138, 191, 42, 181, 128, 243, 76, 241, 206, 115, 78, 113, 204, 45, 18, 47, 176, 141, 16, 143, 178, 7, 56, 5, 154, 167, 58, 165, 152, 89, 230, 91, 100, 217, 228, 219, 102, 55, 8, 61, 162, 151, 2, 157, 168, 233, 86, 227, 220, 105, 92, 99, 214, 118, 201, 124, 67, 246, 195, 252, 73, 136, 183, 130, 29, 40, 189, 34, 23, 198, 121, 196, 251, 70, 123, 68, 249, 184, 135, 186, 37, 24, 133, 26, 39, 104, 215, 98, 93, 232, 221, 226, 87, 41, 22, 35, 188, 137, 28, 131, 182, 25, 38, 27, 132, 185, 36, 187, 134, 216, 103, 218, 229, 88, 101, 90, 231, 166, 153, 164, 59, 6, 155, 4, 57, 71, 248, 69, 122, 199, 250, 197, 120, 247, 72, 253, 194, 119, 66, 125, 200, 150, 169, 156, 3, 54, 163, 60, 9]
S8_2 = [41, 182, 35, 28, 137, 188, 131, 22, 232, 215, 226, 93, 104, 221, 98, 87, 90, 101, 88, 231, 218, 103, 216, 229, 27, 132, 25, 38, 187, 134, 185, 36, 197, 250, 199, 120, 69, 248, 71, 122, 164, 59, 166, 153, 4, 57, 6, 155, 150, 9, 156, 163, 54, 3, 60, 169, 119, 72, 125, 194, 247, 66, 253, 200, 219, 228, 217, 102, 91, 230, 89, 100, 5, 154, 7, 56, 165, 152, 167, 58, 105, 86, 99, 220, 233, 92, 227, 214, 55, 168, 61, 2, 151, 162, 157, 8, 136, 23, 130, 189, 40, 29, 34, 183, 246, 201, 252, 67, 118, 195, 124, 73, 186, 37, 184, 135, 26, 39, 24, 133, 68, 123, 70, 249, 196, 121, 198, 251, 238, 209, 236, 83, 110, 211, 108, 81, 144, 15, 146, 173, 48, 13, 50, 175, 94, 97, 84, 235, 222, 107, 212, 225, 160, 63, 170, 149, 0, 53, 10, 159, 31, 128, 21, 42, 191, 138, 181, 32, 193, 254, 203, 116, 65, 244, 75, 126, 47, 176, 45, 18, 143, 178, 141, 16, 113, 78, 115, 204, 241, 76, 243, 206, 190, 33, 180, 139, 30, 43, 20, 129, 223, 224, 213, 106, 95, 234, 85, 96, 111, 80, 109, 210, 239, 82, 237, 208, 142, 17, 140, 179, 46, 19, 44, 177, 240, 207, 242, 77, 112, 205, 114, 79, 49, 174, 51, 12, 145, 172, 147, 14, 1, 158, 11, 52, 161, 148, 171, 62, 64, 127, 74, 245, 192, 117, 202, 255]
S8_3 = [210, 111, 80, 109, 82, 237, 208, 239, 140, 177, 46, 179, 44, 19, 142, 17, 28, 41, 182, 35, 188, 131, 22, 137, 226, 87, 104, 93, 98, 221, 232, 215, 163, 150, 9, 156, 3, 60, 169, 54, 125, 200, 247, 194, 253, 66, 119, 72, 77, 240, 207, 242, 205, 114, 79, 112, 51, 14, 145, 12, 147, 172, 49, 174, 99, 214, 233, 220, 227, 92, 105, 86, 2, 55, 168, 61, 162, 157, 8, 151, 83, 238, 209, 236, 211, 108, 81, 110, 146, 175, 48, 173, 50, 13, 144, 15, 45, 16, 143, 18, 141, 178, 47, 176, 204, 113, 78, 115, 76, 243, 206, 241, 189, 136, 23, 130, 29, 34, 183, 40, 252, 73, 118, 67, 124, 195, 246, 201, 222, 107, 84, 97, 94, 225, 212, 235, 63, 10, 149, 0, 159, 160, 53, 170, 228, 89, 102, 91, 100, 219, 230, 217, 165, 152, 7, 154, 5, 58, 167, 56, 26, 39, 184, 37, 186, 133, 24, 135, 123, 198, 249, 196, 251, 68, 121, 70, 128, 181, 42, 191, 32, 31, 138, 21, 65, 244, 203, 254, 193, 126, 75, 116, 101, 216, 231, 218, 229, 90, 103, 88, 187, 134, 25, 132, 27, 36, 185, 38, 33, 20, 139, 30, 129, 190, 43, 180, 95, 234, 213, 224, 223, 96, 85, 106, 158, 171, 52, 161, 62, 1, 148, 11, 192, 117, 74, 127, 64, 255, 202, 245, 250, 71, 120, 69, 122, 197, 248, 199, 4, 57, 166, 59, 164, 155, 6, 153]
S8_4 = [63, 214, 22, 26, 29, 20, 226, 208, 60, 0, 176, 231, 144, 167, 182, 31, 96, 225, 210, 198, 107, 186, 37, 190, 241, 86, 206, 45, 148, 12, 120, 156, 109, 48, 13, 17, 23, 128, 113, 30, 124, 172, 139, 170, 228, 229, 181, 234, 131, 154, 3, 195, 66, 16, 171, 216, 39, 236, 9, 18, 98, 146, 180, 67, 233, 91, 223, 194, 74, 59, 232, 75, 8, 212, 69, 50, 149, 151, 152, 188, 119, 134, 125, 133, 121, 2, 77, 115, 90, 79, 207, 202, 161, 110, 80, 173, 123, 28, 255, 95, 25, 1, 70, 99, 92, 218, 168, 108, 58, 87, 122, 76, 101, 239, 4, 230, 251, 240, 53, 178, 6, 213, 135, 97, 89, 246, 159, 185, 68, 174, 217, 160, 85, 138, 72, 169, 32, 197, 145, 15, 163, 177, 11, 143, 10, 199, 155, 65, 235, 84, 248, 24, 221, 106, 114, 196, 193, 46, 244, 165, 183, 55, 187, 41, 192, 130, 82, 111, 127, 162, 204, 57, 222, 254, 142, 42, 38, 224, 83, 5, 103, 153, 157, 73, 52, 78, 219, 118, 227, 33, 19, 27, 54, 7, 205, 164, 200, 62, 215, 179, 116, 56, 140, 64, 245, 150, 137, 43, 71, 34, 36, 184, 243, 141, 158, 203, 189, 94, 132, 175, 147, 166, 249, 117, 102, 40, 136, 21, 237, 238, 81, 220, 14, 242, 88, 44, 100, 35, 112, 209, 252, 105, 253, 129, 47, 191, 61, 247, 93, 49, 51, 250, 104, 126, 211, 201]

#analyse_box.analyze_linear(S8_0,False)



S8_0_INV = SINV(S8_0)
S8_1_INV = SINV(S8_1)
S8_2_INV = SINV(S8_2)
S8_3_INV = SINV(S8_3)
S8_4_INV = SINV(S8_4)

#S8_0 = [i for i in range(256)]
#S8_1 = [i for i in range(256)]
#S8_2 = [i for i in range(256)]
#S8_3 = [i for i in range(256)]


def squeeze(w):
    x = 0
    for i in w:
        x<<=8
        x|=i
    return x

def F(x,r):

    x = [(x>>(56-(i<<3)) & 0xFF) for i in range(8)]
    
    z0 = S8_0[x[0]]
    z1 = S8_1[x[1]]
    z2 = S8_2[x[2]]
    z3 = S8_3[x[3]]
    z4 = S8_1[x[4]]
    z5 = S8_2[x[5]]
    z6 = S8_3[x[6]]
    z7 = S8_0[x[7]]
    
    #print('Round {}, S()    : {:016x}'.format(r, squeeze((z0,z1,z2,z3,z4,z5,z6,z7))))
    
    w0 = z2 ^ z3 ^ z4 ^ z6 ^ z7
    w1 = z0 ^ z1 ^ z3 ^ z4 ^ z7
    w2 = z0 ^ z1 ^ z4 ^ z5 ^ z6
    w3 = z1 ^ z2 ^ z3 ^ z5 ^ z6
    w4 = z0 ^ z2 ^ z3 ^ z6 ^ z7
    w5 = z0 ^ z3 ^ z4 ^ z5 ^ z7
    w6 = z0 ^ z1 ^ z2 ^ z4 ^ z5
    w7 = z1 ^ z2 ^ z5 ^ z6 ^ z7

    #print('Round {}, P()    : {:016x}'.format(r, squeeze((w0,w1,w2,w3,w4,w5,w6,w7))))

    return squeeze((w0,w1,w2,w3,w4,w5,w6,w7))

def key_schedule(key):
    keys = [key]
    for r in range(5):
        x = F(keys[-1],r)
        x = [(x>>(56-(i<<3)) & 0xFF) for i in range(8)]

        z0 = S8_0[x[0]]
        z1 = S8_1[x[1]]
        z2 = S8_2[x[2]]
        z3 = S8_3[x[3]]
        z4 = S8_1[x[4]]
        z5 = S8_2[x[5]]
        z6 = S8_3[x[6]]
        z7 = S8_0[x[7]]

        x = squeeze((z0,z1,z2,z3,z4,z5,z6,z7))
        #print('Round {}, S()    : {:016x}'.format(r, x))
        #print()
        keys += [x]

    print(len(keys))
    return keys

def invKey_schedule(key):
    keys = [key]
    for r in range(5):
        x = [(keys[-1]>>(56-(i<<3)) & 0xFF) for i in range(8)]

        z0 = S8_0_INV[x[0]]
        z1 = S8_1_INV[x[1]]
        z2 = S8_2_INV[x[2]]
        z3 = S8_3_INV[x[3]]
        z4 = S8_1_INV[x[4]]
        z5 = S8_2_INV[x[5]]
        z6 = S8_3_INV[x[6]]
        z7 = S8_0_INV[x[7]]

        x = squeeze((z0,z1,z2,z3,z4,z5,z6,z7))
        x = F_inv(x)

        keys += [x]

    return keys

def F_inv(x):
    x = [(x>>(56-(i<<3)) & 0xFF) for i in range(8)]

    z0,z1,z2,z3,z4,z5,z6,z7 = x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7]

    x0 = z2 ^ z3 ^ z4 ^ z6 ^ z7
    x1 = z0 ^ z1 ^ z3 ^ z4 ^ z7
    x2 = z0 ^ z1 ^ z4 ^ z5 ^ z6
    x3 = z1 ^ z2 ^ z3 ^ z5 ^ z6
    x4 = z0 ^ z2 ^ z3 ^ z6 ^ z7
    x5 = z0 ^ z3 ^ z4 ^ z5 ^ z7
    x6 = z0 ^ z1 ^ z2 ^ z4 ^ z5
    x7 = z1 ^ z2 ^ z5 ^ z6 ^ z7

    x0  = S8_0_INV[x0]
    x1  = S8_1_INV[x1]
    x2  = S8_2_INV[x2]
    x3  = S8_3_INV[x3]
    x4  = S8_1_INV[x4]
    x5  = S8_2_INV[x5]
    x6  = S8_3_INV[x6]
    x7  = S8_0_INV[x7]

    return squeeze((x0,x1,x2,x3,x4,x5,x6,x7))


    
def encrypt(x,k):
    
    for i in range(4):
        #print('Round {}, state  : {:016x}'.format(i, x))
        x ^= k[i]
        #print('Round {}, addkey : {:016x}'.format(i, x))
        x = F(x,i)
        #print()

    #print('Round 5, state  : {:016x}'.format(x))
    x^= k[i+1]
    #print('Round 5, addkey : {:016x}'.format(x))
    x = [(x>>(56-(i<<3)) & 0xFF) for i in range(8)]
    
    z0 = S8_4[x[0]]
    z1 = S8_4[x[1]]
    z2 = S8_4[x[2]]
    z3 = S8_4[x[3]]
    z4 = S8_4[x[4]]
    z5 = S8_4[x[5]]
    z6 = S8_4[x[6]]
    z7 = S8_4[x[7]]

    x = squeeze((z0,z1,z2,z3,z4,z5,z6,z7))
    #print('Round 5, S()    : {:016x}'.format(x))
    x^= k[i+2]
    #print('Round 5, addkey : {:016x}'.format(x))
    #print()
    return x

def decrypt(x,k):
    x ^= k[-1]
    
    x = [(x>>(56-(i<<3)) & 0xFF) for i in range(8)]
    
    x0  = S8_4_INV[x[ 0]]
    x1  = S8_4_INV[x[ 1]]
    x2  = S8_4_INV[x[ 2]]
    x3  = S8_4_INV[x[ 3]]
    x4  = S8_4_INV[x[ 4]]
    x5  = S8_4_INV[x[ 5]]
    x6  = S8_4_INV[x[ 6]]
    x7  = S8_4_INV[x[ 7]]

    x = squeeze((x0,x1,x2,x3,x4,x5,x6,x7))

    x^= k[-2]

    for i in range(3,-1,-1):
        x = F_inv(x)
        x ^= k[i]
    return x


def F_t(x):
    x = [(x>>(56-(i<<3)) & 0xFF) for i in range(8)]

    z0 = x[0]
    z1 = x[1]
    z2 = x[2]
    z3 = x[3]
    z4 = x[4]
    z5 = x[5]
    z6 = x[6]
    z7 = x[7]

    w0 = z1 ^ z2 ^ z4 ^ z5 ^ z6
    w1 = z1 ^ z2 ^ z3 ^ z6 ^ z7
    w2 = z0 ^ z3 ^ z4 ^ z6 ^ z7
    w3 = z0 ^ z1 ^ z3 ^ z4 ^ z5
    w4 = z0 ^ z1 ^ z2 ^ z5 ^ z6
    w5 = z2 ^ z3 ^ z5 ^ z6 ^ z7
    w6 = z0 ^ z2 ^ z3 ^ z4 ^ z7
    w7 = z0 ^ z1 ^ z4 ^ z5 ^ z7

    return squeeze((w0,w1,w2,w3,w4,w5,w6,w7))

def LP():

    def generatePairs():
        k = key_schedule(0xf89ea8c409de89bb)

        for i in k:
            print('{:016x}'.format(i))
            
        Pairs = []
        for i in range(300000):
            p = int.from_bytes(urandom(8),byteorder='big')
            Pairs += [(p,encrypt(p,k))]
        with open('plaintexts_ciphertexts.txt', 'w') as F:
            F.write(str(Pairs))

        return Pairs


    Pairs = generatePairs()
    
    KEYS = []
    
    for K in range(8):
        
        
        print('Cracking K{}...'.format(K))
    
        k_0 = {}
        k_1 = {}
        for i in range(256):
            k_0[i] = -1*(len(Pairs)>>1)
            k_1[i] = -1*(len(Pairs)>>1)

        shift = (56-(K<<3))
        for pair in Pairs:
            p = pair[0]>>shift
            for ki in range(256):
                
                c = S8_4_INV[((pair[1]>>shift)&0xFF) ^ ki] #Partial decryption of the corresponding byte of the ciphertext

                k_0[ki] += P[(p & 0x41) ^ (c & 0x51)]
                k_1[ki] += P[(p & 0x41) ^ (c & 0x14)]
        
        k = {}            
        for i in range(256):
            k[i] = abs(k_0[i]) + abs(k_1[i])
                
        T= sorted(k.items(),key=operator.itemgetter(1))[::-1]

        print('Best candidats for K{}'.format(K))
        for i in range(5):
            print('0x{:02x} : {}'.format(T[i][0],T[i][1]))
        print()

        KEYS += [T[:5]]

    for k0 in KEYS[0]:
        for k1 in KEYS[1]:
            for k2 in KEYS[2]:
                for k3 in KEYS[3]:
                    for k4 in KEYS[4]:
                        for k5 in KEYS[5]:
                            for k6 in KEYS[6]:
                                for k7 in KEYS[7]:
                                    k = k0[0]<<56 | k1[0]<<48 | k2[0]<<40 | k3[0]<<32 | k4[0]<<24 | k5[0]<<16 | k6[0]<<8 | k7[0]

                                    keys = invKey_schedule(k)[::-1]

                                    for i in range(10):
                                        p = Pairs[i][0]
                                        c = Pairs[i][1]

                                        if encrypt(p,keys) == c:
                                            print('{:016x}'.format(keys[0]))
                                            return keys[0]
        

def compute():
    A = compute_LP.compute()
    A.threshold = 0.25 #Doesn't use an SBOX LP <0.25
    A.LP_threshold = 0.00001  #Discards all linear path with pr < 10^(-5)
    A.rounds = 4 #Number of rounds
    A.linear_diffusion_t = F_t #Transposed function of the linear diffusion

    A.S = [S8_0,S8_1,S8_2,S8_3, #Sboxes
           S8_1,S8_2,S8_3,S8_0]

    A.blockbyte = 8 #Size of the cipher in bytes

    A.create_masks()

compute()
#compute_LP.analyse('result_1.txt',[S8_0,S8_1,S8_2,S8_3,S8_1,S8_2,S8_3,S8_0],8)
#LP()

